struct Prism : public Shape
{
	Prism(int sides, float x = 1.0f, float y = 1.0f)
	{
		float theta = 0.0f;
		// Top face.
		shape_vertices.push_back(0.5f);
		shape_vertices.push_back(1.0f);
		shape_vertices.push_back(0.5f);
		for (int i = 0; i < sides; ++i)
		{
			shape_vertices.push_back(0.5f + 0.5f * cos(theta));
			shape_vertices.push_back(1.0f);
			shape_vertices.push_back(0.5f + 0.5f * sin(theta));
			theta += 2 * PI / sides;
		}
		// Clone of second vertex on top.
		shape_vertices.push_back(0.5f + 0.5f * cos(0.0f));
		shape_vertices.push_back(1.0f);
		shape_vertices.push_back(0.5f + 0.5f * sin(0.0f));
		// Bottom face.
		shape_vertices.push_back(0.5f);
		shape_vertices.push_back(0.0f);
		shape_vertices.push_back(0.5f);
		theta = 0.0f; // Not really necessary.
		for (int i = 0; i < sides; ++i)
		{
			shape_vertices.push_back(0.5f + 0.5f * cos(theta));
			shape_vertices.push_back(0.0f);
			shape_vertices.push_back(0.5f + 0.5f * sin(theta));
			theta += 2 * PI / sides;
		}
		// Clone of second vertex on bottom.
		shape_vertices.push_back(0.5f + 0.5f * cos(0.0f));
		shape_vertices.push_back(0.0f);
		shape_vertices.push_back(0.5f + 0.5f * sin(0.0f));
		// Indices now.
		// Bottom face.
		for (int i = sides + 2; i <= sides * 2 + 1; i++)
		{
			shape_indices.push_back(sides + 2);
			shape_indices.push_back(i + 1);
			shape_indices.push_back(i + 2);
		}
		// Middle faces.
		for (int i = 1; i <= sides; i++)
		{
			// Triangle one.
			shape_indices.push_back(i);
			shape_indices.push_back(i+1);
			shape_indices.push_back(sides + i + 3);
			// Triangle two.
			shape_indices.push_back(sides + i + 3);
			shape_indices.push_back(sides + i + 2);
			shape_indices.push_back(i);
		}
		// Top face.
		for (int i = 1; i < sides + 1; i++)
		{
			shape_indices.push_back(0);
			shape_indices.push_back(i + 1);
			shape_indices.push_back(i);
		}
		
		// Update UVs. Top middle.
		shape_uvs.push_back(0.0f);
		shape_uvs.push_back(0.0f);
		for (int i = 0; i <= sides; ++i)
		{
			shape_uvs.push_back((1.0f - (float)i / (float)sides) * x);	// u
			shape_uvs.push_back(y);								// v
		}
		// Bottom middle.
		shape_uvs.push_back(0.5f);
		shape_uvs.push_back(0.5f);
		for (int i = 0; i <= sides; ++i)
		{
			shape_uvs.push_back((1.0f - (float)i / (float)sides) * x);
			shape_uvs.push_back(0.0f);
		}
		ColorShape(1.0f, 1.0f, 1.0f);
		CalcAverageNormals(shape_indices, shape_indices.size(), shape_vertices, shape_vertices.size());
	}
};